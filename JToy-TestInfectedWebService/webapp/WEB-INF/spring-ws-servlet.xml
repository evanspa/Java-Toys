<?xml version="1.0" encoding="UTF-8"?>

<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<!-- Defines the location of the WSDL so that it can be obtained through
		 GET requests -->
	<bean id="txnidgenerator" 
		class="org.springframework.ws.wsdl.wsdl11.SimpleWsdl11Definition">
		<constructor-arg value="/WEB-INF/wsdl/TransactionIdentifier-concrete-soap.wsdl" />
	</bean>

	<!--
		SOAPAction HTTP-header based endpoint mapping.  This mapping will inspect
		the HTTP SOAPAction header in order to route processing to a
		particular endpoint.

		This mapping includes the following interceptors:
		(+) payloadLoggingInterceptor - we're going to log the contents of the
			SOAP-BODY of every inbound message
		(+) soapEnvelopLoggingInterceptor - we're going to log the contents of
			the entire SOAP message of every
			inbound message
		(+) validatingInterceptor - this will validate that messages (inbound
			and outbound) will adhere to the schemas specified in the WSDL
	-->
	<bean id="soapActionEndpointMapping"
		class="org.springframework.ws.soap.server.endpoint.mapping.SoapActionEndpointMapping">
		<property name="interceptors">
			<list>
				<ref bean="payloadLoggingInterceptor"/>
				<ref bean="soapEnvelopLoggingInterceptor"/>
				<ref bean="validatingInterceptor"/>
			</list>
		</property>
		<property name="mappings">
			<props>
				<prop key="http://name.paulevans/samples/action/AnyCommand">
					CommandProcessingEndpoint
				</prop>
			</props>
		</property>
	</bean>
	
	<!-- Mapping based on the root element of the contents of the SOAP body
	 	 (i.e. the 'payload').  This mapping will inspect the fully qualified
	 	 name (QName) of the payload root element in order to route processing
	 	 to a particular endpoint.
	 	 
		This mapping includes the following interceptors:
		(+) payloadLoggingInterceptor - we're going to log the contents of the
			SOAP-BODY of every inbound message
		(+) soapEnvelopLoggingInterceptor - we're going to log the contents of
			the entire SOAP message of every
			inbound message
		(+) validatingInterceptor - this will validate that messages (inbound
			and outbound) will adhere to the schemas specified in the WSDL  
	-->
	<bean id="payloadRootQNameEndpointMapping"
		class="org.springframework.ws.server.endpoint.mapping.PayloadRootQNameEndpointMapping">
		<property name="interceptors">
			<list>
				<ref bean="payloadLoggingInterceptor"/>
				<ref bean="soapEnvelopLoggingInterceptor"/>
				<ref bean="validatingInterceptor"/>
			</list>
		</property>
		<property name="mappings">
			<props>
				<prop key="{http://name.paulevans/samples/TransactionIdentifier-commands}TransactionIdGeneratorCommand">
					CommandProcessingEndpoint
				</prop>
			</props>
		</property>
	</bean>
	
	<!--  Define endpoint object -->
	<bean id="CommandProcessingEndpoint"
		class="name.paulevans.distcmdfrmwk.server.cmdendpoint.ws.SpringMarshallingPayloadEndpoint">
		<property name="marshaller" ref="marshaller" />
		<property name="unmarshaller" ref="marshaller" />
		<property name="commandExecutor">
			<bean class="name.paulevans.distcmdfrmwk.CommandExecutor" />
		</property>
	</bean>
	
	<!-- Define an exception resolver -->
	<bean id="exceptionResolver" 
		class="org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver">
		
		<!-- Okay fine; we'll default to it being the server's fault (sheesh) -->
		<property name="defaultFault" value="SERVER" />
		
		<!-- Configure different types of exceptions -->
		<property name="exceptionMappings">
			<props>
				<!-- It's the client's fault if this exception is thrown -->
				<prop key="name.paulevans.txnidgenerator.common.InvalidUseCaseOrChannelException">CLIENT</prop>
			</props>
		</property>
	</bean>
	
	<!-- Define a logging interceptor for just the message payload (contents of
		 SOAP body) -->
	<bean id="payloadLoggingInterceptor" 
		class="org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor">

		<property name="logRequest" value="true"/>
		<property name="logResponse" value="true"/>
		<property name="loggerName" value="payloadMessages"/>
	</bean>

	<!-- Define a logging interceptor for the entire SOAP message -->
	<bean id="soapEnvelopLoggingInterceptor"
		  class="org.springframework.ws.soap.server.endpoint.interceptor.SoapEnvelopeLoggingInterceptor">
		<property name="logRequest" value="true"/>
		<property name="logResponse" value="true"/>
		<property name="loggerName" value="soapEnvMessages"/>
	</bean>

	<!-- Define a validating interceptor; we're going to be strict here and
		 validate both incoming requests and outbound responses.  -->
	<bean id="validatingInterceptor"
		  class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor">
		<property name="schemas">
			<list>
				<value>/WEB-INF/wsdl/canonicals/TransactionIdentifier-types.xsd</value>
				<value>/WEB-INF/wsdl/canonicals/TransactionIdentifier-commands.xsd</value>
			</list>
		</property>
		<property name="validateRequest" value="true"/>
		<property name="validateResponse" value="true"/>
	</bean>

	<!-- Define the Castor-based payload marshaller -->
	<bean id="marshaller"
		class="org.springframework.oxm.castor.CastorMarshaller">
		<property name="mappingLocations">
			<list>
				<!-- order matters here! -->
				<value>classpath:castor-commonTypes.xml</value>
				<value>classpath:castor-GenTxnIDCmd.xml</value>
				<value>classpath:castor-GenTxnIDServerCmd.xml</value>
			</list>
		</property>
	</bean>
</beans>