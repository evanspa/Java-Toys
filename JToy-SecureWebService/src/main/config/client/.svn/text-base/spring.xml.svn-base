<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	Spring configuration for the client application.  Http proxy configuration
	is set in the 'hostConfig' bean.  To disable http proxy, simply comment-out
	the property-set of the 'proxyHostPlusPort' property.
	
	Author: Paul R Evans
	Version: $Id$
 -->
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<!-- define a message factory -->
	<bean id="messageFactory"
		class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory"/>
	
	<!-- define a 'calculate sub total' command instance -->
	<bean id="calculateSubTotalCommand"
		class="name.paulevans.sampleprojects.command.client.clientcmds.CalculateOrderSubTotalCommand"
		scope="prototype">
		
		<!-- set the command delegate -->
		<property name="clientCommandDelegate" 
			ref="soapWsClientCommandDelegate" />				
	</bean>
	
	<!-- define SOAP web service-based client command delegate object -->
	<bean id="soapWsClientCommandDelegate"
		class="name.paulevans.sampleprojects.command.client.cmddelegate.ws.soap.spring.SpringSoapWebServiceClientCommandDelegate">
	
		<!-- set the Spring web service template -->
		<property name="webServiceTemplate" ref="webServiceTemplate" />
		
		<!-- set the SOAP action header value -->
		<property name="soapAction" 
			value="http://name.paulevans/samples/action/AnyCommand" />
	</bean>

	<!-- define the template object -->
	<bean id="webServiceTemplate"
		class="org.springframework.ws.client.core.WebServiceTemplate">

		<!-- Set the message factory object -->
		<constructor-arg ref="messageFactory"/>
		
		<!-- Set marshaler/un-marshaler -->
		<property name="marshaller" ref="marshaller" />
		<property name="unmarshaller" ref="marshaller" />

		<!-- Set the endpiont URL -->
		<property name="defaultUri"
			value="http://localhost:8088/SecureWebService/" />

		<!-- Set the client interceptors -->
		<property name="interceptors">
				<list>
					<ref bean="securityInterceptor" />
				</list>
		</property>
		
		<!-- specify to use Apache's HTTP library -->
		<property name="messageSender" ref="httpSender" />	
	</bean>
	
	<!-- Define http sender object -->
    <bean id="httpSender"
    	class="org.springframework.ws.transport.http.CommonsHttpMessageSender">
		<constructor-arg><ref bean="httpClient"/></constructor-arg>
    </bean>

	<!-- Define http client object -->
    <bean id="httpClient"
    	class="org.apache.commons.httpclient.HttpClient">
      	<property name="hostConfiguration" ref="hostConfig" />
    </bean>

	<!-- Define http host configuration w/proxy settings configured -->
	<bean id="hostConfig" 
		class="name.paulevans.sampleprojects.util.client.http.HttpHostConfiguration">
		<property name="proxyHostPlusPort" value="localhost:8081" />
	</bean>

	<!-- Defines security interceptor -->
	<bean id="securityInterceptor"
		class="org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor">

    	<!--
    	=================== Creating the Request =====================
    	===================  (+) Sign the request
    	===================  (+) Encrypt the message
    	 -->
		<property name="securementActions" value="Signature Encrypt" />
    	
    	<!-- provide the crypto object to the securement-side of this
			 interceptor -->
		<property name="securementSignatureCrypto" ref="crypto" />
		<property name="securementEncryptionCrypto" ref="crypto" />		

		<!--  The message will be signed with the client's private key  -->
		<property name="securementSignatureUser" value="clientkey" />
		<!--  the passphrase of the client's private key - this is required of
			  course because the signing is performed with the private key -->
    	<property name="securementPassword" value="changeit" />
		<!--  this will instruct WSS4J to include the client's complete
			  certificate as part of the request -->
		<property name="securementSignatureKeyIdentifier" 
			value="DirectReference" />
		
		<!--  The message will be encrypted with the server's public key -->
		<property name="securementEncryptionUser" value="trusted_serverkey" />
    	
    	<!--    	
    	=================== Handling the Response =====================
    	===================  (+) Verify signature
    	===================  (+) Decrypt message
    	 -->
		<property name="validationActions" value="Signature Encrypt" />
    
		<!-- provide the crypto object to the validation-side of this
			 interceptor -->
		<property name="validationDecryptionCrypto" ref="crypto" />
		<property name="validationSignatureCrypto" ref="crypto" />
		
		<!-- required in order to decrypt the response message - the following callback
			 handler is given the alias of the entry in the key store whose
			 private key can be used to decrypt the response message's embedded
			 symmetric key - this symmetric key will then be used to decrypt
			 the message payload -->
		<property name="validationCallbackHandler">
        	<bean class="org.springframework.ws.soap.security.wss4j.callback.KeyStoreCallbackHandler">
            	<property name="privateKeyPassword" value="changeit" />
        	</bean>
    	</property>    		    		
	</bean>
	
	<!-- Define a crypto bean that is required by our security interceptor -->
	<bean id="crypto" 
		class="org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean">    	
    	<property name="keyStoreLocation" 
    		value="file:/var/data/SampleCodeProjects/SecureWebService/keystores/clientKeyStore.jks" />
    	<property name="keyStorePassword" value="changeit"/>
	</bean>	
	
	<!-- Define the Castor-based payload marshaller -->
	<bean id="marshaller"
		class="org.springframework.oxm.castor.CastorMarshaller">
		<property name="mappingLocations">
			<list>
				<value>classpath:castor-mapping_commonTypes.xml</value>
				<value>classpath:castor-mapping_clientCommands.xml</value>
			</list>
		</property>
	</bean>	
</beans>
