<?xml version="1.0" encoding="UTF-8"?>

<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<!-- Defines the location of the WSDL so that it can be obtained through
		 GET requests -->
	<bean id="ordersystem" 
		class="org.springframework.ws.wsdl.wsdl11.SimpleWsdl11Definition">
		<constructor-arg value="/WEB-INF/wsdl/OrderSystem-concrete-soap.wsdl" />
	</bean>

	<!--
		Define our endpoint mappings (EndpointMapping beans are automatically 
		detected by the MessageDispatcher)

		The mappings include the following interceptors:
		(+) payloadLoggingInterceptor - we're going to log the contents of the
			SOAP-BODY of every inbound message
		(+) soapEnvelopLoggingInterceptor - we're going to log the contents of
			the entire SOAP message of every
			inbound message
		(+) validatingInterceptor - this will validate that messages (inbound
			and outbound) will adhere to the schemas specified in the WSDL
	-->
	<bean id="endpointMapping"
		class="org.springframework.ws.soap.server.endpoint.mapping.SoapActionEndpointMapping">
		<property name="interceptors">
			<list>
				<ref bean="payloadLoggingInterceptor"/>
				<ref bean="soapEnvelopLoggingInterceptor"/>
				<ref bean="securityInterceptor" />
				<ref bean="validatingInterceptor"/>
			</list>
		</property>
		<property name="mappings">
			<props>
				<prop key="http://name.paulevans/samples/action/AnyCommand">
					CommandProcessingEndpoint
				</prop>
			</props>
		</property>
	</bean>
	
	<!--  Define endpoint object -->
	<bean id="CommandProcessingEndpoint"
		class="name.paulevans.sampleprojects.endpoint.MarshallingPayloadEndpoint">
		<property name="marshaller" ref="marshaller" />
		<property name="unmarshaller" ref="marshaller" />
	</bean>
	
	<!-- Defines security interceptor -->
	<bean id="securityInterceptor"
		class="org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor">
		
    	<!--
    	=================== Handling the Request =====================
    	===================  (+) Verify signature
    	===================  (+) Decrypt message
    	 -->
		<property name="validationActions" value="Signature Encrypt" />
		
		<!-- provide the crypto object to the validation-side of this
			 interceptor -->
		<property name="validationDecryptionCrypto" ref="crypto" />
		<property name="validationSignatureCrypto" ref="crypto" />			
		
		<!-- required in order to decrypt the message - the following callback
			 handler is given the alias of the entry in the key store whose
			 private key can be used to decrypt the request message's embedded
			 symmetric key - this symmetric key will then be used to decrypt
			 the message payload -->
		<property name="validationCallbackHandler">
        	<bean class="org.springframework.ws.soap.security.wss4j.callback.KeyStoreCallbackHandler">
            	<property name="privateKeyPassword" value="changeit" />
        	</bean>
    	</property>
    	
    	<!--
    	=================== Creating the Response =====================
    	===================  (+) Sign the response
    	===================  (+) Encrypt the message
    	 -->
		<property name="securementActions" value="Signature Encrypt" />    	
    
    	<!-- provide the crypto object to the securement-side of this
			 interceptor -->
		<property name="securementSignatureCrypto" ref="crypto" />
		<property name="securementEncryptionCrypto" ref="crypto" />		
		
		<!--  The message will be signed with the server's private key  -->
		<property name="securementSignatureUser" value="serverkey" />
		<!--  the passphrase of the server's private key - this is required of
			  course because the signing is performed with the private key -->
    	<property name="securementPassword" value="changeit" />
		<!--  this will instruct WSS4J to include the server's complete
			  certificate as part of the response -->
		<property name="securementSignatureKeyIdentifier"
			value="DirectReference" />
    	
    	<!--  The message will be encrypted using the requestor's public key
    		  (which was included in the original request) -->
		<property name="securementEncryptionUser" value="useReqSigCert" />		
	</bean>
	
	<!-- Define a crypto bean that is required by our security interceptor -->
	<bean id="crypto" 
		class="org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean">    	
    	<property name="keyStoreLocation" 
    		value="file:/var/data/SampleCodeProjects/SecureWebService/keystores/serverKeyStore.jks" />
    	<property name="keyStorePassword" value="changeit"/>
	</bean>	

	<!-- Define a logging interceptor for just the message payload (contents of
		 SOAP body) -->
	<bean id="payloadLoggingInterceptor" 
		class="org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor">

		<property name="logRequest" value="true"/>
		<property name="logResponse" value="true"/>
		<property name="loggerName" value="payloadMessages"/>
	</bean>

	<!-- Define a logging interceptor for the entire SOAP message -->
	<bean id="soapEnvelopLoggingInterceptor"
		  class="org.springframework.ws.soap.server.endpoint.interceptor.SoapEnvelopeLoggingInterceptor">

		<property name="logRequest" value="true"/>
		<property name="logResponse" value="true"/>
		<property name="loggerName" value="soapEnvMessages"/>
	</bean>

	<!-- Define a validating interceptor; we're going to be strict here and
		 validate both incoming requests and outbound responses.  -->
	<bean id="validatingInterceptor"
		  class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor">
		<property name="schema"
				  value="/WEB-INF/wsdl/canonicals/OrderSystem-commands.xsd" />
		<property name="validateRequest" value="true"/>
		<property name="validateResponse" value="true"/>
	</bean>

	<!-- Define the Castor-based payload marshaller -->
	<bean id="marshaller"
		class="org.springframework.oxm.castor.CastorMarshaller">
		<property name="mappingLocations">
			<list>
				<value>classpath:castor-mapping_commonTypes.xml</value>
				<value>classpath:castor-mapping_serverCommands.xml</value>
			</list>
		</property>
	</bean>
</beans>